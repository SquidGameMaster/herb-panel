<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Herb Panel</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
    <script>
        // Apply theme from localStorage immediately when the page loads
        (function() {
            const savedPalette = localStorage.getItem('selectedPalette');
            if (savedPalette) {
                try {
                    const palettes = {
                        'blue-dark': {
                            primary: '#2563eb',
                            primaryDark: '#1d4ed8',
                            background: '#0f172a',
                            surface: '#1e293b',
                            text: '#f8fafc',
                            textSecondary: '#94a3b8',
                            border: '#334155',
                            hover: '#334155'
                        },
                        'purple-dark': {
                            primary: '#7c3aed',
                            primaryDark: '#6d28d9',
                            background: '#0f172a',
                            surface: '#1e293b',
                            text: '#f8fafc',
                            textSecondary: '#94a3b8',
                            border: '#334155',
                            hover: '#334155'
                        },
                        'green-dark': {
                            primary: '#10b981',
                            primaryDark: '#059669',
                            background: '#0f172a',
                            surface: '#1e293b',
                            text: '#f8fafc',
                            textSecondary: '#94a3b8',
                            border: '#334155',
                            hover: '#334155'
                        },
                        'orange-dark': {
                            primary: '#f97316',
                            primaryDark: '#ea580c',
                            background: '#0f172a',
                            surface: '#1e293b',
                            text: '#f8fafc',
                            textSecondary: '#94a3b8',
                            border: '#334155',
                            hover: '#334155'
                        },
                        'pink-dark': {
                            primary: '#ec4899',
                            primaryDark: '#db2777',
                            background: '#0f172a',
                            surface: '#1e293b',
                            text: '#f8fafc',
                            textSecondary: '#94a3b8',
                            border: '#334155',
                            hover: '#334155'
                        },
                        'cyan-dark': {
                            primary: '#06b6d4',
                            primaryDark: '#0891b2',
                            background: '#0f172a',
                            surface: '#1e293b',
                            text: '#f8fafc',
                            textSecondary: '#94a3b8',
                            border: '#334155',
                            hover: '#334155'
                        },
                        'blue-light': {
                            primary: '#2563eb',
                            primaryDark: '#1d4ed8',
                            background: '#f1f5f9',
                            surface: '#ffffff',
                            text: '#0f172a',
                            textSecondary: '#475569',
                            border: '#cbd5e1',
                            hover: '#e2e8f0'
                        },
                        'purple-light': {
                            primary: '#7c3aed',
                            primaryDark: '#6d28d9',
                            background: '#f1f5f9',
                            surface: '#ffffff',
                            text: '#0f172a',
                            textSecondary: '#475569',
                            border: '#cbd5e1',
                            hover: '#e2e8f0'
                        }
                    };

                    const palette = palettes[savedPalette];
                    if (palette) {
                        document.documentElement.style.setProperty('--primary', palette.primary);
                        document.documentElement.style.setProperty('--primary-dark', palette.primaryDark);
                        document.documentElement.style.setProperty('--background', palette.background);
                        document.documentElement.style.setProperty('--surface', palette.surface);
                        document.documentElement.style.setProperty('--text', palette.text);
                        document.documentElement.style.setProperty('--text-secondary', palette.textSecondary);
                        document.documentElement.style.setProperty('--border', palette.border);
                        document.documentElement.style.setProperty('--hover', palette.hover);
                        if (palette.accent) {
                            document.documentElement.style.setProperty('--accent', palette.accent);
                        }
                    }
                } catch (e) {
                    console.error('Error applying theme:', e);
                }
            }
        })();
    </script>
    <style>
        :root {
            --primary: #2563eb;
            --primary-dark: #1d4ed8;
            --background: #f8fafc;
            --surface: #ffffff;
            --text: #1e293b;
            --text-secondary: #64748b;
            --border: #e2e8f0;
            --hover: #f1f5f9;
            --accent: #60a5fa;
            --sidebar-width: 250px;
            --sidebar-collapsed-width: 64px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background);
            color: var(--text);
            line-height: 1.5;
            overflow-x: hidden;
        }

        /* Layout */
        .app-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: var(--sidebar-width);
            background: var(--surface);
            border-right: 1px solid var(--border);
            height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            transform: translate3d(0, 0, 0);
            transition: none;
            will-change: width;
            z-index: 100;
            display: flex;
            flex-direction: column;
            backface-visibility: hidden;
            -webkit-backface-visibility: hidden;
        }

        .sidebar.sidebar-animating {
            transition: width 80ms linear;
        }

        .sidebar.collapsed {
            width: var(--sidebar-collapsed-width);
        }

        .sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            align-items: center;
            justify-content: space-between;
            height: 64px;
        }

        .sidebar-toggle {
            background: none;
            border: none;
            padding: 0.5rem;
            cursor: pointer;
            color: var(--text-secondary);
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            transition: background-color 80ms linear, transform 80ms linear;
        }

        .sidebar-toggle:hover {
            background-color: var(--hover);
            color: var(--text);
        }

        .sidebar-toggle:active {
            transform: translateX(-2px);
        }

        .toggle-icon {
            transition: transform 80ms linear;
            transform-origin: center;
        }

        .sidebar.collapsed .toggle-icon {
            transform: rotate(180deg);
        }

        .sidebar-content {
            flex: 1;
            overflow-y: auto;
            padding: 1rem 0;
        }

        .nav-item {
            padding: 0.75rem 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            color: var(--text);
            text-decoration: none;
            transition: background-color 0.2s;
            cursor: pointer;
        }

        .nav-item:hover {
            background-color: var(--hover);
        }

        .nav-item.active {
            background-color: var(--hover);
            color: var(--primary);
            font-weight: 500;
        }

        .nav-item svg {
            flex-shrink: 0;
        }

        .nav-text {
            white-space: nowrap;
            opacity: 1;
            transition: opacity 60ms linear;
        }

        .sidebar.collapsed .nav-text {
            opacity: 0;
            pointer-events: none;
        }

        /* Main Content */
        .main-container {
            margin-left: var(--sidebar-width);
            flex: 1;
            transition: none;
            will-change: margin-left;
            min-width: 0;
            width: 100%;
        }

        .sidebar.sidebar-animating ~ .main-container {
            transition: margin-left 80ms linear;
        }

        .sidebar.collapsed ~ .main-container {
            margin-left: var(--sidebar-collapsed-width);
        }

        .main-content {
            padding: 2rem;
            max-width: 100%;
            width: 100%;
        }

        .content-container {
            width: 100%;
            max-width: 100%;
        }

        .header {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            padding: 0.5rem 0;
            margin-bottom: 1.5rem;
            width: 100%;
        }

        .header h1 {
            font-size: 1.875rem;
            font-weight: 700;
            color: var(--text);
        }

        .controls {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        button {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.5rem;
            font-weight: 500;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        button.primary {
            background-color: var(--primary);
            color: white;
        }

        button.primary:hover {
            background-color: var(--primary-dark);
        }

        button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        #statusLog {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        #statusLog p {
            padding: 0.75rem;
            background: var(--background);
            border-radius: 0.5rem;
            font-size: 0.875rem;
        }

        .inventory-grid {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            width: 100%;
            padding: 0;
            margin: 0;
        }

        .inventory-item {
            background: var(--surface);
            border-radius: 0.75rem;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s, box-shadow 0.2s;
            width: 100%;
        }

        .inventory-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .item-id {
            color: var(--primary);
            text-decoration: none;
            font-weight: 600;
            font-size: 1rem;
            padding: 0.5rem 1rem;
            background: var(--hover);
            border-radius: 0.5rem;
            transition: all 0.2s;
        }

        .item-id:hover {
            background: var(--primary);
            color: white;
        }

        .price {
            color: var(--success);
            font-weight: 600;
            font-size: 1.125rem;
        }

        .stats {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin: 1rem 0;
            padding: 1.25rem;
            background: var(--background);
            border-radius: 0.5rem;
            width: 100%;
        }

        .stats-left {
            display: flex;
            gap: 2rem;
        }

        .stats-right {
            text-align: right;
        }

        .stat-item {
            padding: 0.5rem 1rem;
            min-width: 120px;
        }

        .stat-item .label {
            font-size: 0.75rem;
            color: var(--text-secondary);
            margin-bottom: 0.25rem;
        }

        .stat-item .value {
            font-weight: 600;
            color: var(--text);
        }

        .days-ago {
            font-size: 0.75rem;
            color: var(--text-secondary);
            margin-top: 0.25rem;
        }

        .item-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(90px, 1fr));
            gap: 1rem;
            padding: 1.25rem;
            background: var(--background);
            border-radius: 0.5rem;
            max-height: 300px;
            overflow-y: auto;
            width: 100%;
        }

        .item-card {
            background: var(--surface);
            border-radius: 0.5rem;
            padding: 0.75rem;
            text-align: center;
            transition: transform 0.2s;
        }

        .item-card:hover {
            transform: scale(1.05);
        }

        .item-card img {
            width: 64px;
            height: 64px;
            object-fit: contain;
            margin-bottom: 0.5rem;
            border-radius: 0.25rem;
        }

        .item-card-title {
            font-size: 0.75rem;
            margin: 0.5rem 0;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            color: var(--text);
        }

        .item-card-price {
            font-size: 0.875rem;
            color: var(--success);
            font-weight: 600;
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--background);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb {
            background: var(--text-secondary);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--text);
        }

        /* Add these styles after the existing styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            position: relative;
            background-color: var(--surface);
            margin: 5% auto;
            padding: 2rem;
            width: 90%;
            max-width: 600px;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-header h2 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text);
        }

        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--text-secondary);
            cursor: pointer;
            padding: 0.5rem;
        }

        .filter-group {
            margin-bottom: 1.5rem;
        }

        .filter-group h3 {
            font-size: 1rem;
            margin-bottom: 0.75rem;
            color: var(--text);
        }

        .filter-input {
            display: flex;
            gap: 1rem;
            margin-bottom: 0.5rem;
        }

        .filter-input input[type="number"] {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--border);
            border-radius: 0.375rem;
            font-size: 0.875rem;
        }

        .filter-checkbox {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
        }

        .filter-checkbox input[type="checkbox"] {
            width: 1rem;
            height: 1rem;
        }

        .sort-group {
            margin-bottom: 1.5rem;
        }

        .sort-group select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--border);
            border-radius: 0.375rem;
            font-size: 0.875rem;
            background-color: var(--surface);
        }

        .filter-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 2rem;
        }

        .filter-actions button {
            min-width: 100px;
        }

        button.secondary {
            background-color: var(--hover);
            color: var(--text);
        }

        button.secondary:hover {
            background-color: var(--border);
        }

        /* Add styles for the sort controls */
        .sort-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin: 1rem 0;
            padding: 1rem;
            background: var(--primary);
            color: white;
            border-radius: 0.75rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s ease;
        }

        .sort-controls label {
            font-size: 0.875rem;
            color: white;
            font-weight: 500;
        }

        .sort-controls select {
            padding: 0.5rem 0.75rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 0.375rem;
            font-size: 0.875rem;
            background-color: rgba(255, 255, 255, 0.15);
            color: white;
            cursor: pointer;
            transition: background-color 0.2s ease, border-color 0.2s ease;
        }

        .sort-controls select:hover {
            background-color: rgba(255, 255, 255, 0.25);
            border-color: rgba(255, 255, 255, 0.5);
        }

        .sort-controls select option {
            background-color: var(--surface);
            color: var(--text);
        }

        /* Update the modal sort group */
        .sort-group select {
            margin-bottom: 0.5rem;
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .sidebar {
                transform: translate3d(-100%, 0, 0);
                width: var(--sidebar-width) !important;
                transition: none;
            }

            .sidebar.sidebar-animating {
                transition: transform 80ms linear;
            }

            .sidebar.active {
                transform: translate3d(0, 0, 0);
            }

            .sidebar.collapsed {
                transform: translate3d(-100%, 0, 0);
                width: var(--sidebar-width) !important;
            }

            .main-container {
                margin-left: 0 !important;
                transition: none;
            }

            .mobile-menu-toggle {
                display: block;
                position: fixed;
                top: 1rem;
                left: 1rem;
                z-index: 110;
                background: var(--surface);
                border-radius: 50%;
                width: 40px;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                border: none;
                cursor: pointer;
                transition: transform 80ms linear, background-color 80ms linear;
            }

            .mobile-menu-toggle:hover {
                background-color: var(--hover);
            }

            .mobile-menu-toggle:active {
                transform: scale(0.96);
            }
        }

        /* Hide mobile toggle on desktop */
        .mobile-menu-toggle {
            display: none;
        }

        /* Pagination styles */
        .pagination {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin: 2rem 0;
        }

        .pagination-controls {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .pagination-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            background-color: var(--surface);
            border: 1px solid var(--border);
            color: var(--text);
            cursor: pointer;
            transition: all 0.2s;
        }

        .pagination-btn:hover {
            background-color: var(--hover);
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .pagination-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .page-input {
            width: 4rem;
            padding: 0.5rem;
            border-radius: 0.375rem;
            border: 1px solid var(--border);
            background-color: var(--surface);
            color: var(--text);
            text-align: center;
        }

        .pagination-summary {
            text-align: center;
            color: var(--text-secondary);
            font-size: 0.875rem;
        }
        
        /* Bubble toggle styles */
        .bubble-group {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.75rem;
        }
        
        .bubble-toggle input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
            height: 0;
            width: 0;
        }
        
        .bubble-toggle label {
            display: inline-block;
            padding: 0.5rem 1rem;
            background-color: var(--background);
            border-radius: 2rem;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .bubble-toggle input:checked + label {
            background-color: var(--primary);
            color: white;
        }
        
        /* Range input styles */
        .range-inputs {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-top: 0.75rem;
        }
        
        .range-inputs input {
            flex: 1;
            padding: 0.5rem;
            border: 1px solid var(--border);
            border-radius: 0.375rem;
            background-color: var(--background);
            color: var(--text);
        }
        
        .range-inputs span {
            color: var(--text-secondary);
        }
        
        /* Select styles */
        .select-wrapper {
            position: relative;
            margin-top: 0.75rem;
        }
        
        .select-wrapper select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--border);
            border-radius: 0.375rem;
            background-color: var(--background);
            color: var(--text);
            appearance: none;
            cursor: pointer;
        }
        
        .select-wrapper::after {
            content: '';
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            width: 0;
            height: 0;
            border-left: 5px solid transparent;
            border-right: 5px solid transparent;
            border-top: 5px solid var(--text-secondary);
            pointer-events: none;
        }
    </style>
</head>
<body>
    <%- include('header', { path: '/' }) %>

    <div class="main-content">
        <div class="content-container">
            <div class="header">
                <div class="controls">
                    <button class="primary" onclick="toggleAutoRefresh('start')" id="startBtn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8"/>
                            <path d="M21 3v5h-5"/>
                        </svg>
                        Start Auto-Refresh
                    </button>
                    <button class="primary" onclick="toggleAutoRefresh('stop')" id="stopBtn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                        </svg>
                        Stop Auto-Refresh
                    </button>
                    <button onclick="openFilterModal()">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"/>
                        </svg>
                        Filters
                    </button>
                    <button onclick="clearFilters()">Clear Filters</button>
                </div>
            </div>

            <div class="sort-controls">
                <label for="globalSortOrder">Sort Order:</label>
                <select id="globalSortOrder" onchange="updateSortOrder(this.value)">
                    <option value="asc">Ascending</option>
                    <option value="desc">Descending</option>
                </select>
            </div>

            <div class="inventory-grid">
                <% 
                // Pagination implementation
                const itemsPerPage = 100;
                const currentPage = parseInt(query.page) || 1;
                const startIndex = (currentPage - 1) * itemsPerPage;
                const paginatedInventory = inventory.slice(startIndex, startIndex + itemsPerPage);
                const totalPages = Math.max(1, Math.ceil(inventory.length / itemsPerPage));
                %>

                <% paginatedInventory.forEach(function(item) { %>
                    <div class="inventory-item">
                        <div class="item-header">
                            <a href="https://lzt.market/<%= item.item_id %>/" class="item-id" target="_blank"><%= item.item_id %></a>
                            <% if (item.item_data.price) { %>
                                <span class="price">$<%= item.item_data.price %></span>
                            <% } %>
                        </div>
                        <div class="stats">
                            <div class="stats-left">
                                <div class="stat-item">
                                    <div class="label">Total Value</div>
                                    <div class="value">$<%= item.item_data.total_value.toFixed(2) %></div>
                                </div>
                                <div class="stat-item">
                                    <div class="label">Item Count</div>
                                    <div class="value"><%= item.item_data.item_count %></div>
                                </div>
                            </div>
                            <div class="stats-right">
                                <div class="stat-item">
                                    <div class="label">Last Active</div>
                                    <div class="value">
                                        <% if (item.item_data.steam_last_activity) { 
                                            const lastActiveDate = new Date(item.item_data.steam_last_activity * 1000);
                                            const now = new Date();
                                            const daysAgo = Math.floor((now - lastActiveDate) / (1000 * 60 * 60 * 24));
                                        %>
                                            <%= lastActiveDate.toLocaleDateString() %>
                                            <div class="days-ago">(<%= daysAgo %> days ago)</div>
                                        <% } else { %>
                                            N/A
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="item-cards">
                            <% item.item_data.items.forEach(function(subItem) { %>
                                <div class="item-card">
                                    <% 
                                    let imageUrl = '';
                                    if (subItem.image_url) {
                                        imageUrl = `https://community.cloudflare.steamstatic.com/economy/image/${subItem.image_url}`;
                                    } else if (subItem.icon_url) {
                                        imageUrl = `https://community.cloudflare.steamstatic.com/economy/image/${subItem.icon_url}`;
                                    }
                                    %>
                                    <img 
                                        src="<%= imageUrl %>" 
                                        alt="<%= subItem.title %>" 
                                        onerror="this.onerror=null; this.src='https://community.akamai.steamstatic.com/public/images/skin_1/ico_item_default.png';"
                                    >
                                    <p class="item-card-title" title="<%= subItem.title %>"><%= subItem.title %></p>
                                    <% if (subItem.price) { %>
                                        <p class="item-card-price">$<%= subItem.price %></p>
                                    <% } %>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                <% }); %>
            </div>

            <!-- Pagination Controls -->
            <% if (inventory.length > itemsPerPage) { %>
                <div class="pagination">
                    <div class="pagination-controls">
                        <button 
                            class="pagination-btn" 
                            onclick="changePage(<%= currentPage - 1 %>)" 
                            <%= currentPage <= 1 ? 'disabled' : '' %>
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <polyline points="15 18 9 12 15 6"></polyline>
                            </svg>
                            Previous
                        </button>
                        
                        <div class="pagination-info">
                            <span>Page</span>
                            <input 
                                type="number" 
                                min="1" 
                                max="<%= totalPages %>" 
                                value="<%= currentPage %>" 
                                onchange="changePage(this.value)"
                                class="page-input"
                            />
                            <span>of <%= totalPages %></span>
                        </div>
                        
                        <button 
                            class="pagination-btn" 
                            onclick="changePage(<%= currentPage + 1 %>)" 
                            <%= currentPage >= totalPages ? 'disabled' : '' %>
                        >
                            Next
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <polyline points="9 18 15 12 9 6"></polyline>
                            </svg>
                        </button>
                        
                        <button 
                            class="pagination-btn" 
                            onclick="changePage(<%= totalPages %>)" 
                            <%= currentPage >= totalPages ? 'disabled' : '' %>
                        >
                            Last Page
                        </button>
                    </div>
                    <div class="pagination-summary">
                        Showing <%= startIndex + 1 %>-<%= Math.min(startIndex + itemsPerPage, inventory.length) %> of <%= inventory.length %> items
                    </div>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Filter Modal -->
    <div id="filterModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>
                    <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"/>
                    </svg>
                    Filter Inventory
                </h2>
                <button class="close-btn" onclick="closeFilterModal()">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
            </div>
            
            <form id="filterForm" onsubmit="applyFilters(event)">
                <!-- Item Type Bubble Toggles -->
                <div class="filter-group">
                    <label>
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path>
                            <line x1="7" y1="7" x2="7.01" y2="7"></line>
                        </svg>
                        Item Types
                    </label>
                    <div class="bubble-group">
                        <div class="bubble-toggle">
                            <input type="checkbox" id="ninjaSuit" />
                            <label for="ninjaSuit"><span>Ninja Suit</span></label>
                        </div>
                        <div class="bubble-toggle">
                            <input type="checkbox" id="arcticPack" />
                            <label for="arcticPack"><span>Arctic Pack</span></label>
                        </div>
                        <div class="bubble-toggle">
                            <input type="checkbox" id="frontierDecorPack" />
                            <label for="frontierDecorPack"><span>Frontier Decor</span></label>
                        </div>
                    </div>
                </div>
                
                <!-- Last Active Range -->
                <div class="filter-group">
                    <label>
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="12" r="10"></circle>
                            <polyline points="12 6 12 12 16 14"></polyline>
                        </svg>
                        Last Active (days ago)
                    </label>
                    <div class="range-inputs">
                        <input type="number" id="lastActiveMin" placeholder="Minimum days" min="0">
                        <span>to</span>
                        <input type="number" id="lastActiveMax" placeholder="Maximum days" min="0">
                    </div>
                </div>
                
                <!-- Item Amount Range -->
                <div class="filter-group">
                    <label>
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect>
                            <path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path>
                        </svg>
                        Item Amount
                    </label>
                    <div class="range-inputs">
                        <input type="number" id="itemAmountMin" placeholder="Minimum items" min="0">
                        <span>to</span>
                        <input type="number" id="itemAmountMax" placeholder="Maximum items" min="0">
                    </div>
                </div>
                
                <!-- Sort Options -->
                <div class="filter-group">
                    <label>
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                            <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                        </svg>
                        Sort Options
                    </label>
                    
                    <div class="select-wrapper">
                        <select id="sortBy">
                            <option value="" disabled>Select sort criteria</option>
                            <option value="cheapest_price">Cheapest Price</option>
                            <option value="most_items">Most Items</option>
                            <option value="cheapest_most_value">Best Value</option>
                        </select>
                    </div>
                    
                    <div class="select-wrapper" style="margin-top: 1rem;">
                        <select id="sortOrder">
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                </div>
                
                <!-- Action Buttons -->
                <div class="filter-buttons">
                    <button type="button" onclick="clearFilters()">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                            <line x1="10" y1="11" x2="10" y2="17"></line>
                            <line x1="14" y1="11" x2="14" y2="17"></line>
                        </svg>
                        Clear Filters
                    </button>
                    <button type="submit" class="primary">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                            <polyline points="22 4 12 14.01 9 11.01"></polyline>
                        </svg>
                        Apply Filters
                    </button>
                </div>
            </form>
        </div>
    </div>

    <%- include('footer') %>

    <script>
        // Pagination function
        function changePage(page) {
            page = parseInt(page);
            if (isNaN(page) || page < 1) {
                return;
            }
            
            const url = new URL(window.location);
            url.searchParams.set('page', page);
            window.location.href = url.toString();
        }
        
        // Set up SSE connections
        const notificationsSource = new EventSource('/api/notifications');
        const logsSource = new EventSource('/api/logs');

        // Handle notifications
        notificationsSource.onmessage = function(event) {
            const data = JSON.parse(event.data);
            console.log('Notification:', data);
            // You can update the UI here based on notifications
        };

        // Handle logs
        logsSource.onmessage = function(event) {
            const data = JSON.parse(event.data);
            const statusLog = document.getElementById('statusLog');
            if (statusLog) {
                let html = `<p>${data.message}</p>`;
                if (data.counters) {
                    html += `
                        <p>Pages Checked: ${data.counters.pages_checked}</p>
                        <p>Searches: ${data.counters.searches}</p>
                        <p>Items Added: ${data.counters.items_added}</p>
                        <p>Items Removed: ${data.counters.items_removed}</p>
                    `;
                }
                statusLog.innerHTML = html;
            }
        };

        // Toggle auto-refresh
        async function toggleAutoRefresh(action) {
            try {
                const response = await fetch('/api/toggle_auto_refresh', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ action })
                });
                const data = await response.json();
                console.log('Auto-refresh:', data);
                
                // Update button states
                const startBtn = document.getElementById('startBtn');
                const stopBtn = document.getElementById('stopBtn');
                startBtn.disabled = action === 'start';
                stopBtn.disabled = action === 'stop';
            } catch (error) {
                console.error('Error:', error);
            }
        }

        // Clear filters
        async function clearFilters() {
            try {
                const response = await fetch('/api/clear_filters', {
                    method: 'POST'
                });
                const data = await response.json();
                if (data.status === 'cleared') {
                    location.reload();
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        // Check auto-refresh status on page load
        fetch('/api/check_auto_refresh_status')
            .then(response => response.json())
            .then(data => {
                const startBtn = document.getElementById('startBtn');
                const stopBtn = document.getElementById('stopBtn');
                startBtn.disabled = data.auto_refresh_enabled;
                stopBtn.disabled = !data.auto_refresh_enabled;
            });

        // Modal functions
        function openFilterModal() {
            const modal = document.getElementById('filterModal');
            modal.style.display = 'block';
            // Force reflow to ensure animation works
            modal.offsetHeight;
            modal.classList.add('active');
            
            // Disable body scrolling when modal is open
            document.body.style.overflow = 'hidden';
            
            // Initialize existing filter values if any are active
            initializeFilterValues();
        }

        // Initialize filter values from the current state
        function initializeFilterValues() {
            // Check if any filters are already applied and update UI accordingly
            const bubbleToggles = document.querySelectorAll('.bubble-toggle input');
            
            bubbleToggles.forEach(toggle => {
                // Apply animation class when checked
                if (toggle.checked) {
                    animateBubbleToggle(toggle);
                }
                
                // Add event listeners for animation
                toggle.addEventListener('change', function() {
                    animateBubbleToggle(this);
                });
            });
        }

        // Animate the bubble toggle text fill
        function animateBubbleToggle(toggleInput) {
            const label = toggleInput.nextElementSibling;
            
            if (toggleInput.checked) {
                // Add the animation class
                label.classList.add('color-fill');
            } else {
                // Remove the animation class
                label.classList.remove('color-fill');
            }
        }

        function closeFilterModal() {
            const modal = document.getElementById('filterModal');
            modal.classList.remove('active');
            
            // Wait for the animation to finish before hiding
            setTimeout(() => {
                modal.style.display = 'none';
                // Re-enable body scrolling
                document.body.style.overflow = '';
            }, 300);
        }

        async function applyFilters(event) {
            event.preventDefault();
            
            const filters = {
                last_active: [
                    parseInt(document.getElementById('lastActiveMin').value) || 0,
                    parseInt(document.getElementById('lastActiveMax').value) || 999999
                ],
                item_amount: [
                    parseInt(document.getElementById('itemAmountMin').value) || 0,
                    parseInt(document.getElementById('itemAmountMax').value) || 999999
                ],
                ninja_suit: document.getElementById('ninjaSuit').checked,
                arctic_pack: document.getElementById('arcticPack').checked,
                frontier_decor_pack: document.getElementById('frontierDecorPack').checked,
                sort_by: document.getElementById('sortBy').value,
                sort_order: document.getElementById('sortOrder').value
            };

            try {
                const response = await fetch('/api/filter', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(filters)
                });

                const data = await response.json();
                if (data.status === 'found') {
                    location.reload();
                }
            } catch (error) {
                console.error('Error applying filters:', error);
            }

            closeFilterModal();
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('filterModal');
            if (event.target === modal) {
                closeFilterModal();
            }
        }

        // Add new JavaScript functions
        function updateSortOrder(value) {
            const url = new URL(window.location);
            url.searchParams.set('sort_order', value);
            window.location.href = url.toString();
        }

        // Initialize sort order from URL on page load
        document.addEventListener('DOMContentLoaded', () => {
            const url = new URL(window.location);
            const sortOrder = url.searchParams.get('sort_order');
            if (sortOrder) {
                const selectElement = document.getElementById('globalSortOrder');
                if (selectElement) {
                    selectElement.value = sortOrder;
                }
            }

            // Override the global applyTheme function to also update sort controls
            const originalApplyTheme = window.applyTheme;
            if (originalApplyTheme) {
                window.applyTheme = function(paletteName) {
                    // Call the original function first
                    originalApplyTheme(paletteName);
                    
                    // No need to do anything else as we're using CSS variables
                    // which will update automatically when the theme changes
                }
            }
        });
    </script>

    <script>
        // Global theme application function to ensure consistency across pages
        window.applyTheme = function(paletteName) {
            if (!window.palettes) {
                // If palettes aren't defined in this page, use the ones from the header
                const palettes = {
                    'blue-dark': {
                        primary: '#2563eb',
                        primaryDark: '#1d4ed8',
                        background: '#0f172a',
                        surface: '#1e293b',
                        text: '#f8fafc',
                        textSecondary: '#94a3b8',
                        border: '#334155',
                        hover: '#334155'
                    },
                    'purple-dark': {
                        primary: '#7c3aed',
                        primaryDark: '#6d28d9',
                        background: '#0f172a',
                        surface: '#1e293b',
                        text: '#f8fafc',
                        textSecondary: '#94a3b8',
                        border: '#334155',
                        hover: '#334155'
                    },
                    'green-dark': {
                        primary: '#10b981',
                        primaryDark: '#059669',
                        background: '#0f172a',
                        surface: '#1e293b',
                        text: '#f8fafc',
                        textSecondary: '#94a3b8',
                        border: '#334155',
                        hover: '#334155'
                    },
                    'orange-dark': {
                        primary: '#f97316',
                        primaryDark: '#ea580c',
                        background: '#0f172a',
                        surface: '#1e293b',
                        text: '#f8fafc',
                        textSecondary: '#94a3b8',
                        border: '#334155',
                        hover: '#334155'
                    },
                    'pink-dark': {
                        primary: '#ec4899',
                        primaryDark: '#db2777',
                        background: '#0f172a',
                        surface: '#1e293b',
                        text: '#f8fafc',
                        textSecondary: '#94a3b8',
                        border: '#334155',
                        hover: '#334155'
                    },
                    'cyan-dark': {
                        primary: '#06b6d4',
                        primaryDark: '#0891b2',
                        background: '#0f172a',
                        surface: '#1e293b',
                        text: '#f8fafc',
                        textSecondary: '#94a3b8',
                        border: '#334155',
                        hover: '#334155'
                    },
                    'blue-light': {
                        primary: '#2563eb',
                        primaryDark: '#1d4ed8',
                        background: '#f1f5f9',
                        surface: '#ffffff',
                        text: '#0f172a',
                        textSecondary: '#475569',
                        border: '#cbd5e1',
                        hover: '#e2e8f0'
                    },
                    'purple-light': {
                        primary: '#7c3aed',
                        primaryDark: '#6d28d9',
                        background: '#f1f5f9',
                        surface: '#ffffff',
                        text: '#0f172a',
                        textSecondary: '#475569',
                        border: '#cbd5e1',
                        hover: '#e2e8f0'
                    }
                };
                window.palettes = palettes;
            }
            
            const palette = window.palettes[paletteName];
            if (!palette) return;
            
            // Apply the palette
            document.documentElement.style.setProperty('--primary', palette.primary);
            if (palette.primaryDark) document.documentElement.style.setProperty('--primary-dark', palette.primaryDark);
            document.documentElement.style.setProperty('--background', palette.background);
            document.documentElement.style.setProperty('--surface', palette.surface);
            document.documentElement.style.setProperty('--text', palette.text);
            document.documentElement.style.setProperty('--text-secondary', palette.textSecondary);
            if (palette.border) document.documentElement.style.setProperty('--border', palette.border);
            if (palette.hover) document.documentElement.style.setProperty('--hover', palette.hover);
            if (palette.accent) document.documentElement.style.setProperty('--accent', palette.accent);
            
            // Save the selected palette to localStorage
            localStorage.setItem('selectedPalette', paletteName);
        };

        // Make sure the sidebar collapse state is kept when navigating
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize sidebar state from localStorage
            const sidebar = document.getElementById('sidebar');
            const isCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
            
            if (isCollapsed && window.innerWidth > 768) {
                sidebar.classList.add('collapsed');
            }

            // Handle clicks outside mobile menu to close it
            document.addEventListener('click', (e) => {
                const sidebar = document.getElementById('sidebar');
                const mobileToggle = document.querySelector('.mobile-menu-toggle');
                
                // If click is outside sidebar and toggle button, and we're on mobile
                if (window.innerWidth <= 768 && 
                    !sidebar.contains(e.target) && 
                    e.target !== mobileToggle && 
                    !mobileToggle.contains(e.target)) {
                    sidebar.classList.remove('active');
                }
            });
        });
    </script>
</body>
</html> 